// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoaderServicer is a mock of LoaderServicer interface
type MockLoaderServicer struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderServicerMockRecorder
}

// MockLoaderServicerMockRecorder is the mock recorder for MockLoaderServicer
type MockLoaderServicerMockRecorder struct {
	mock *MockLoaderServicer
}

// NewMockLoaderServicer creates a new mock instance
func NewMockLoaderServicer(ctrl *gomock.Controller) *MockLoaderServicer {
	mock := &MockLoaderServicer{ctrl: ctrl}
	mock.recorder = &MockLoaderServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoaderServicer) EXPECT() *MockLoaderServicerMockRecorder {
	return m.recorder
}

// LoadSchedulesFromDB mocks base method
func (m *MockLoaderServicer) LoadSchedulesFromDB() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSchedulesFromDB")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSchedulesFromDB indicates an expected call of LoadSchedulesFromDB
func (mr *MockLoaderServicerMockRecorder) LoadSchedulesFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSchedulesFromDB", reflect.TypeOf((*MockLoaderServicer)(nil).LoadSchedulesFromDB))
}

// ReloadSchedulesForChat mocks base method
func (m *MockLoaderServicer) ReloadSchedulesForChat(chatID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadSchedulesForChat", chatID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadSchedulesForChat indicates an expected call of ReloadSchedulesForChat
func (mr *MockLoaderServicerMockRecorder) ReloadSchedulesForChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSchedulesForChat", reflect.TypeOf((*MockLoaderServicer)(nil).ReloadSchedulesForChat), chatID)
}
