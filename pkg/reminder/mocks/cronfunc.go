// Code generated by MockGen. DO NOT EDIT.
// Source: cronfunc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	reminder "github.com/enrico5b1b4/telegram-bot/pkg/reminder"
	gomock "github.com/golang/mock/gomock"
)

// MockCronFuncServicer is a mock of CronFuncServicer interface
type MockCronFuncServicer struct {
	ctrl     *gomock.Controller
	recorder *MockCronFuncServicerMockRecorder
}

// MockCronFuncServicerMockRecorder is the mock recorder for MockCronFuncServicer
type MockCronFuncServicerMockRecorder struct {
	mock *MockCronFuncServicer
}

// NewMockCronFuncServicer creates a new mock instance
func NewMockCronFuncServicer(ctrl *gomock.Controller) *MockCronFuncServicer {
	mock := &MockCronFuncServicer{ctrl: ctrl}
	mock.recorder = &MockCronFuncServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCronFuncServicer) EXPECT() *MockCronFuncServicerMockRecorder {
	return m.recorder
}

// Complete mocks base method
func (m *MockCronFuncServicer) Complete(r *reminder.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (mr *MockCronFuncServicerMockRecorder) Complete(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockCronFuncServicer)(nil).Complete), r)
}

// UpdateReminderWithRepeatSchedule mocks base method
func (m *MockCronFuncServicer) UpdateReminderWithRepeatSchedule(rem *reminder.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminderWithRepeatSchedule", rem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReminderWithRepeatSchedule indicates an expected call of UpdateReminderWithRepeatSchedule
func (mr *MockCronFuncServicerMockRecorder) UpdateReminderWithRepeatSchedule(rem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminderWithRepeatSchedule", reflect.TypeOf((*MockCronFuncServicer)(nil).UpdateReminderWithRepeatSchedule), rem)
}
